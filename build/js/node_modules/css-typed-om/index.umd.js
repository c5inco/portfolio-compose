(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.cssTypedOm = {})));
}(this, (function (exports) { 'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _value = new WeakMap();

	var CSSKeywordValue = function () {
		_createClass(CSSKeywordValue, [{
			key: "toString",
			value: function toString() {
				return `${this.value}`;
			}
		}, {
			key: "value",
			get: function get() {
				return _value.get(this);
			},
			set: function set(newValue) {
				_value.set(this, String(newValue));
			}
		}]);

		function CSSKeywordValue() {
			_classCallCheck(this, CSSKeywordValue);

			if (arguments.length < 1) {
				throw new TypeError(`Failed to construct 'CSSKeywordValue': 1 arguments required, but only ${arguments.length} present.`);
			}

			_value.set(this, String(arguments.length <= 0 ? undefined : arguments[0]));
		}

		return CSSKeywordValue;
	}();


	Object.defineProperties(CSSKeywordValue.prototype, {
		value: { enumerable: true }
	});

	var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _value$1 = new WeakMap();

	var CSSMathInvert = function () {
		_createClass$1(CSSMathInvert, [{
			key: 'toString',
			value: function toString() {
				return `calc(1 / ${_value$1.get(this)})`;
			}
		}, {
			key: 'operator',
			get: function get() {
				return 'invert';
			}
		}, {
			key: 'value',
			get: function get() {
				return _value$1.get(this);
			}
		}]);

		function CSSMathInvert(value) {
			_classCallCheck$1(this, CSSMathInvert);

			_value$1.set(this, value);
		}

		return CSSMathInvert;
	}();

	var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _values = new WeakMap();

	var CSSMathMax = function () {
		_createClass$2(CSSMathMax, [{
			key: 'toString',
			value: function toString() {
				return `max(${_values.get(this).join(', ')})`;
			}
		}, {
			key: 'operator',
			get: function get() {
				return 'max';
			}
		}, {
			key: 'values',
			get: function get() {
				return _values.get(this);
			}
		}]);

		function CSSMathMax() {
			_classCallCheck$2(this, CSSMathMax);

			for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
				values[_key] = arguments[_key];
			}

			_values.set(this, values);
		}

		return CSSMathMax;
	}();

	var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _values$1 = new WeakMap();

	var CSSMathMin = function () {
		_createClass$3(CSSMathMin, [{
			key: 'toString',
			value: function toString() {
				return `min(${_values$1.get(this).join(', ')})`;
			}
		}, {
			key: 'operator',
			get: function get() {
				return 'min';
			}
		}, {
			key: 'values',
			get: function get() {
				return _values$1.get(this);
			}
		}]);

		function CSSMathMin() {
			_classCallCheck$3(this, CSSMathMin);

			for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
				values[_key] = arguments[_key];
			}

			_values$1.set(this, values);
		}

		return CSSMathMin;
	}();

	var _createClass$4 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _values$2 = new WeakMap();

	var CSSMathProduct = function () {
		_createClass$4(CSSMathProduct, [{
			key: 'toString',
			value: function toString() {
				return `calc(${_values$2.get(this).reduce(function (contents, value) {
				return `${value instanceof CSSMathInvert ? `${contents ? `${contents} / ` : '1 / '}${value.value}` : `${contents ? `${contents} * ` : ''}${value}`}`;
			}, '')})`;
			}
		}, {
			key: 'operator',
			get: function get() {
				return 'product';
			}
		}, {
			key: 'values',
			get: function get() {
				return _values$2.get(this);
			}
		}]);

		function CSSMathProduct() {
			_classCallCheck$4(this, CSSMathProduct);

			for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
				values[_key] = arguments[_key];
			}

			_values$2.set(this, values);
		}

		return CSSMathProduct;
	}();

	var _createClass$5 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _values$3 = new WeakMap();

	var CSSMathSum = function () {
		_createClass$5(CSSMathSum, [{
			key: 'toString',
			value: function toString() {
				return `calc(${_values$3.get(this).reduce(function (contents, value) {
				return `${contents ? `${contents} + ` : ''}${value}`;
			}, '')})`;
			}
		}, {
			key: 'operator',
			get: function get() {
				return 'product';
			}
		}, {
			key: 'values',
			get: function get() {
				return _values$3.get(this);
			}
		}]);

		function CSSMathSum() {
			_classCallCheck$5(this, CSSMathSum);

			for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
				values[_key] = arguments[_key];
			}

			_values$3.set(this, values);
		}

		return CSSMathSum;
	}();

	function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CSSStyleValue = function CSSStyleValue() {
		_classCallCheck$6(this, CSSStyleValue);

		throw new TypeError('Illegal constructor');
	};

	var units = {
		number: '',
		percent: '%',
		em: 'em',
		ex: 'ex',
		ch: 'ch',
		rem: 'rem',
		vw: 'vw',
		vh: 'vh',
		vmin: 'vmin',
		vmax: 'vmax',
		cm: 'cm',
		mm: 'mm',
		in: 'in',
		pt: 'pt',
		pc: 'pc',
		px: 'px',
		Q: 'Q',
		deg: 'deg',
		grad: 'grad',
		rad: 'rad',
		turn: 'turn',
		s: 's',
		ms: 'ms',
		Hz: 'Hz',
		kHz: 'kHz',
		dpi: 'dpi',
		dpcm: 'dpcm',
		dppx: 'dppx',
		fr: 'fr'
	};

	var _createClass$6 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CSSNumericValue = function () {
		function CSSNumericValue() {
			_classCallCheck$7(this, CSSNumericValue);
		}

		_createClass$6(CSSNumericValue, [{
			key: 'add',
			value: function add() {
				var Constructor = this.constructor;
				var result = new Constructor(this.value, this.unit);
				var values = [];

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var arg = _step.value;

						if (arg instanceof Constructor) {
							if (values.length || result.unit !== arg.unit) {
								values.push(arg);
							} else {
								result.value += arg.value;
							}
						} else if (arg instanceof CSSMathProduct || arg instanceof CSSMathMax || arg instanceof CSSMathMin || arg instanceof CSSMathInvert) {
							values.push(arg);
						} else {
							return null;
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				return values.length ? new (Function.prototype.bind.apply(CSSMathSum, [null].concat([result], values)))() : result;
			}
		}, {
			key: 'div',
			value: function div() {
				var Constructor = this.constructor;
				var result = new Constructor(this.value, this.unit);
				var values = [];

				for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
					args[_key2] = arguments[_key2];
				}

				var _iteratorNormalCompletion2 = true;
				var _didIteratorError2 = false;
				var _iteratorError2 = undefined;

				try {
					for (var _iterator2 = args[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
						var arg = _step2.value;

						if (typeof arg === 'number') {
							arg = new CSSUnitValue(arg, 'number');
						}

						if (arg instanceof Constructor) {
							if (values.length || result.unit !== arg.unit && arg.unit !== 'number') {
								values.push(arg);
							} else {
								result.value /= arg.value;
							}
						} else {
							return null;
						}
					}
				} catch (err) {
					_didIteratorError2 = true;
					_iteratorError2 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion2 && _iterator2.return) {
							_iterator2.return();
						}
					} finally {
						if (_didIteratorError2) {
							throw _iteratorError2;
						}
					}
				}

				return values.length ? new (Function.prototype.bind.apply(CSSMathProduct, [null].concat([result], _toConsumableArray(values.map(function (value) {
					return new CSSMathInvert(value);
				})))))() : result;
			}
		}, {
			key: 'max',
			value: function max() {
				var result = new CSSUnitValue(this.value, this.unit);
				var values = [result];

				for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
					args[_key3] = arguments[_key3];
				}

				var _iteratorNormalCompletion3 = true;
				var _didIteratorError3 = false;
				var _iteratorError3 = undefined;

				try {
					for (var _iterator3 = args[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
						var arg = _step3.value;

						if (arg instanceof CSSUnitValue) {
							if (values.length > 1 || result.unit !== arg.unit) {
								values.push(arg);
							} else {
								result.value = Math.max(result.value, arg.value);
							}
						} else {
							return null;
						}
					}
				} catch (err) {
					_didIteratorError3 = true;
					_iteratorError3 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion3 && _iterator3.return) {
							_iterator3.return();
						}
					} finally {
						if (_didIteratorError3) {
							throw _iteratorError3;
						}
					}
				}

				return values.length > 1 ? new (Function.prototype.bind.apply(CSSMathMax, [null].concat(values)))() : result;
			}
		}, {
			key: 'min',
			value: function min() {
				var result = new CSSUnitValue(this.value, this.unit);
				var values = [result];

				for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
					args[_key4] = arguments[_key4];
				}

				var _iteratorNormalCompletion4 = true;
				var _didIteratorError4 = false;
				var _iteratorError4 = undefined;

				try {
					for (var _iterator4 = args[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
						var arg = _step4.value;

						if (arg instanceof CSSUnitValue) {
							if (values.length > 1 || result.unit !== arg.unit) {
								values.push(arg);
							} else {
								result.value = Math.min(result.value, arg.value);
							}
						} else {
							return null;
						}
					}
				} catch (err) {
					_didIteratorError4 = true;
					_iteratorError4 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion4 && _iterator4.return) {
							_iterator4.return();
						}
					} finally {
						if (_didIteratorError4) {
							throw _iteratorError4;
						}
					}
				}

				return values.length > 1 ? new (Function.prototype.bind.apply(CSSMathMin, [null].concat(values)))() : result;
			}
		}, {
			key: 'mul',
			value: function mul() {
				var Constructor = this.constructor;
				var result = new Constructor(this.value, this.unit);
				var values = [];

				for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
					args[_key5] = arguments[_key5];
				}

				var _iteratorNormalCompletion5 = true;
				var _didIteratorError5 = false;
				var _iteratorError5 = undefined;

				try {
					for (var _iterator5 = args[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
						var arg = _step5.value;

						if (typeof arg === 'number') {
							arg = new CSSUnitValue(arg, 'number');
						}

						if (arg instanceof Constructor) {
							if (values.length || result.unit !== arg.unit && arg.unit !== 'number') {
								values.push(arg);
							} else {
								result.value *= arg.value;
							}
						} else {
							return null;
						}
					}
				} catch (err) {
					_didIteratorError5 = true;
					_iteratorError5 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion5 && _iterator5.return) {
							_iterator5.return();
						}
					} finally {
						if (_didIteratorError5) {
							throw _iteratorError5;
						}
					}
				}

				return values.length ? new (Function.prototype.bind.apply(CSSMathProduct, [null].concat([result], values)))() : result;
			}
		}, {
			key: 'sub',
			value: function sub() {
				var Constructor = this.constructor;
				var result = new Constructor(this.value, this.unit);
				var values = [];

				for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
					args[_key6] = arguments[_key6];
				}

				var _iteratorNormalCompletion6 = true;
				var _didIteratorError6 = false;
				var _iteratorError6 = undefined;

				try {
					for (var _iterator6 = args[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
						var arg = _step6.value;

						if (arg instanceof Constructor) {
							if (values.length || result.unit !== arg.unit) {
								values.push(new Constructor(arg.value * -1, arg.unit));
							} else {
								result.value -= arg.value;
							}
						} else {
							return null;
						}
					}
				} catch (err) {
					_didIteratorError6 = true;
					_iteratorError6 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion6 && _iterator6.return) {
							_iterator6.return();
						}
					} finally {
						if (_didIteratorError6) {
							throw _iteratorError6;
						}
					}
				}

				return values.length ? new (Function.prototype.bind.apply(CSSMathSum, [null].concat([result], values)))() : result;
			}
		}]);

		return CSSNumericValue;
	}();

	var _createClass$7 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _value$2 = new WeakMap();
	var _unit = new WeakMap();

	var CSSUnitValue = function (_CSSNumericValue) {
		_inherits(CSSUnitValue, _CSSNumericValue);

		_createClass$7(CSSUnitValue, [{
			key: 'toString',
			value: function toString() {
				return `${this.value}${units[this.unit]}`;
			}
		}, {
			key: 'value',
			get: function get() {
				return _value$2.get(this);
			},
			set: function set(newValue) {
				_value$2.set(this, getFiniteNumber(newValue));
			}
		}, {
			key: 'unit',
			get: function get() {
				return _unit.get(this);
			}
		}]);

		function CSSUnitValue() {
			_classCallCheck$8(this, CSSUnitValue);

			var _this = _possibleConstructorReturn(this, (CSSUnitValue.__proto__ || Object.getPrototypeOf(CSSUnitValue)).call(this));

			if (arguments.length < 2) {
				throw new TypeError(`Failed to construct 'CSSUnitValue': 2 arguments required, but only ${arguments.length} present.`);
			}

			_value$2.set(_this, getFiniteNumber(arguments.length <= 0 ? undefined : arguments[0]));
			_unit.set(_this, getUnit(arguments.length <= 1 ? undefined : arguments[1]));
			return _this;
		}

		return CSSUnitValue;
	}(CSSNumericValue);


	Object.defineProperties(CSSUnitValue.prototype, {
		value: { enumerable: true },
		unit: { enumerable: true }
	});

	function getFiniteNumber(value) {
		if (isNaN(value) || Math.abs(value) === Infinity) {
			throw new TypeError(`Failed to set the 'value' property on 'CSSUnitValue': The provided double value is non-finite.`);
		}

		return Number(value);
	}

	function getUnit(unit) {
		if (!(Object.keys(units).indexOf(unit) !== -1)) {
			throw new TypeError(`Failed to construct 'CSSUnitValue': Invalid unit: ${unit}`);
		}

		return unit;
	}

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var parseAsValue = (function (string) {
		var unitParsingMatch = String(string).match(unitParsingMatcher);

		if (unitParsingMatch) {
			var _unitParsingMatch = _slicedToArray(unitParsingMatch, 3),
			    value = _unitParsingMatch[1],
			    unit = _unitParsingMatch[2];

			return new CSSUnitValue(value, unitKeys[unitValues.indexOf(unit || '')]);
		}

		return new CSSKeywordValue(string);
	});

	var unitKeys = Object.keys(units);
	var unitValues = Object.values(units);
	var unitParsingMatcher = new RegExp(`^([-+]?[0-9]*\.?[0-9]+)(${unitValues.join('|')})?$`);

	var _createClass$8 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var StylePropertyMap = function () {
		_createClass$8(StylePropertyMap, [{
			key: 'get',
			value: function get() {
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				if (args.length < 1) {
					throw new TypeError(`Failed to execute 'get' on 'StylePropertyMapReadOnly': 1 argument required, but only ${args.length} present.`);
				}

				var property = args[0];

				var value = this.style[property];

				if (value) {
					return parseAsValue(value);
				}

				return null;
			}
		}, {
			key: 'set',
			value: function set() {
				for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
					args[_key2] = arguments[_key2];
				}

				if (args.length < 2) {
					throw new TypeError(`Failed to execute 'set' on 'StylePropertyMap': 2 arguments required, but only ${args.length} present.`);
				}

				var property = args[0],
				    value = args[1];


				this.style[property] = String(value);
			}
		}]);

		function StylePropertyMap() {
			_classCallCheck$9(this, StylePropertyMap);

			throw new TypeError('Illegal constructor');
		}

		return StylePropertyMap;
	}();

	function _classCallCheck$10(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function polyfill(window) {
		if (!window.CSS) window.CSS = function CSS() {
			_classCallCheck$10(this, CSS);
		};

		Object.keys(units).forEach(function (unit) {
			if (!(unit in window.CSS)) {
				window.CSS[unit] = function (value) {
					return new CSSUnitValue(value, unit);
				};
			}
		});

		defineProperty(window.CSSRule.prototype, 'styleMap', function (context) {
			return context.style;
		});

		defineProperty(window.Element.prototype, 'attributeStyleMap', function (context) {
			return context.style;
		});

		defineProperty(window.Element.prototype, 'computedStyleMap', function (context) {
			return getComputedStyle(context);
		});

		if (!window.CSSKeywordValue) window.CSSKeywordValue = CSSKeywordValue;
		if (!window.CSSMathInvert) window.CSSMathInvert = CSSMathInvert;
		if (!window.CSSMathMax) window.CSSMathMax = CSSMathMax;
		if (!window.CSSMathMin) window.CSSMathMin = CSSMathMin;
		if (!window.CSSMathProduct) window.CSSMathProduct = CSSMathProduct;
		if (!window.CSSMathSum) window.CSSMathSum = CSSMathSum;
		if (!window.CSSStyleValue) window.CSSStyleValue = CSSStyleValue;
		if (!window.CSSUnitValue) window.CSSUnitValue = CSSUnitValue;
		if (!window.StylePropertyMap) window.StylePropertyMap = StylePropertyMap;

		function defineProperty(prototype, property, getStyle) {
			if (!(property in prototype)) {
				Object.defineProperty(prototype, property, {
					configurable: true,
					enumerable: true,
					get() {
						var computedStyleMap = Object.create(StylePropertyMap.prototype);

						computedStyleMap.style = getStyle(this);

						return computedStyleMap;
					}
				});
			}
		}
	}

	exports.default = polyfill;
	exports.CSSKeywordValue = CSSKeywordValue;
	exports.CSSStyleValue = CSSStyleValue;
	exports.CSSUnitValue = CSSUnitValue;
	exports.StylePropertyMap = StylePropertyMap;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
